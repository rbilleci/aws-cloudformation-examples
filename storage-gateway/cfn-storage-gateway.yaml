AWSTemplateFormatVersion: 2010-09-09

Parameters:

  AMI:
    Type: String
    Default: ami-08dcf54ec97e3cbc8
    Description: Region Specific AMI of the Storage Gateway

  CidrBlock:
    Type: String
    Default: 10.0.0.0/27
    Description: CIDR Block Range for VPC

  CidrSubnets:
    Type: Number
    Default: 2
    Description: The number of subnets to generate.
    MinValue: 2
    MaxValue: 3

  CidrBitsPerSubnet:
    Type: Number
    Default: 4
    Description: The number of subnet bits for the CIDR. For example, specifying a value "8" for this parameter will create a CIDR with a mask of "/24".
    MinValue: 4
    MaxValue: 16

  EC2KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Default: aws
    Description: Key Pair

  GatewayCacheSize:
    Type: Number
    Default: 200
    MinValue: 200
    MaxValue: 16000
    Description: Volume Size for the Storage Gateway Cache, in GiB

  GatewayUploadBufferSize:
    Type: Number
    Default: 200
    MinValue: 200
    MaxValue: 16000
    Description: Volume Size for the Storage Gateway Uploa Buffer, in GiB

  InstanceType:
    Type: String
    Default: r5n.large
    Description: Instance Type for the Storage Gateway

  ResourceNamePrefix:
    Type: String
    Default: sg
    Description: Prefix used for resource name tag

  VPNCustomerIPAddress:
    Type: String
    Default: 1.1.1.1
    Description: The Internet-routable IP address for the customer gateway's outside interface. The address must be static

  VPNAmazonASN:
    Type: Number
    Default: 65001
    Description: The private Autonomous System Number (ASN) for the Amazon side of a BGP session

  VPNCustomerASN:
    Type: Number
    Default: 65000
    Description: For devices that support BGP, the customer gateway's BGP ASN

Conditions:
  Create2AZs: !Equals [!Ref CidrSubnets, "2"]
  Create3AZs: !Equals [!Ref CidrSubnets, "3"]

Resources:

  # Network ------------------------------------------------------------------------------------------------------------

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref CidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${ResourceNamePrefix}-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${ResourceNamePrefix}-ig

  InternetGatewayGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ResourceNamePrefix}-route-table

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt VPC.CidrBlock, !Ref CidrSubnets, !Ref CidrBitsPerSubnet ]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ResourceNamePrefix}-subnet-1

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt VPC.CidrBlock, !Ref CidrSubnets, !Ref CidrBitsPerSubnet ]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ResourceNamePrefix}-subnet-2

  Subnet3:
    Condition: Create3AZs
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt VPC.CidrBlock, !Ref CidrSubnets, !Ref CidrBitsPerSubnet ]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ResourceNamePrefix}-subnet-3

  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref RouteTable

  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref RouteTable

  Subnet3RouteTableAssociation:
    Condition: Create3AZs
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet3
      RouteTableId: !Ref RouteTable

  SGSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Storage Gateway
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        # iSCSI
        - IpProtocol: -1
          FromPort: 3260
          ToPort: 3260
          CidrIp: 0.0.0.0/0
        # NFS
        - IpProtocol: -1
          FromPort: 111
          ToPort: 111
          CidrIp: 0.0.0.0/0
        - IpProtocol: -1
          FromPort: 2049
          ToPort: 2049
          CidrIp: 0.0.0.0/0
        - IpProtocol: -1
          FromPort: 20048
          ToPort: 20048
          CidrIp: 0.0.0.0/0
        # SMB
        - IpProtocol: -1
          FromPort: 135
          ToPort: 139
          CidrIp: 0.0.0.0/0
        - IpProtocol: -1
          FromPort: 445
          ToPort: 445
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${ResourceNamePrefix}-securitygroup

  # VPC Endpoints ------------------------------------------------------------------------------------------------------

  S3VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - !Ref RouteTable
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref VPC
      VpcEndpointType: Gateway

  SGVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: false
      ServiceName: !Sub com.amazonaws.${AWS::Region}.storagegateway
      VpcId: !Ref VPC
      SubnetIds: !If [Create2AZs,
                      [!Ref Subnet1, !Ref Subnet2],
                      [!Ref Subnet1, !Ref Subnet2, !Ref Subnet3]]
      SecurityGroupIds:
        - !Ref SGVPCEndpointSecurityGroup
      VpcEndpointType: Interface

  SGVPCEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Storage Gateway VPC Endpoint
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 65535
          SourceSecurityGroupId: !GetAtt SGSecurityGroup.GroupId
      Tags:
        - Key: Name
          Value: !Sub ${ResourceNamePrefix}-vpce-securitygroup

  # VPN ----------------------------------------------------------------------------------------------------------------

  VPNGateway:
    Type: AWS::EC2::VPNGateway
    Properties:
      AmazonSideAsn: !Ref VPNAmazonASN
      Type: ipsec.1

  VPNGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      VpnGatewayId: !Ref VPNGateway

  VPNConnection:
    Type: AWS::EC2::VPNConnection
    Properties:
      Type: ipsec.1
      StaticRoutesOnly: true
      CustomerGatewayId:
        !Ref VPNCustomerGateway
      VpnGatewayId:
        !Ref VPNGateway

  VPNCustomerGateway:
    Type: AWS::EC2::CustomerGateway
    Properties:
      Type: ipsec.1
      BgpAsn: !Ref VPNCustomerASN
      IpAddress: !Ref VPNCustomerIPAddress

  # Storage Gateway ASG ------------------------------------------------------------------------------------------------

  SGRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ ec2.amazonaws.com ]
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      Path: /
      Policies:
        - PolicyName: sg-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - storagegateway:ActivateGateway
                  - storagegateway:AddUploadBuffer
                  - storagegateway:AddCache
                  - storagegateway:DescribeGatewayInformation
                  - storagegateway:ListGateways
                  - storagegateway:ListLocalDisks
                  - storagegateway:StartGateway
                  - storagegateway:RefreshCache
                Resource: '*'

  SGInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [ !Ref SGRole ]

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${ResourceNamePrefix}-launch-template
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: '/dev/sdb'
            Ebs:
              DeleteOnTermination: true
              Encrypted: true
              VolumeSize: !Ref GatewayUploadBufferSize
              VolumeType: gp2
          - DeviceName: '/dev/sdc'
            Ebs:
              DeleteOnTermination: true
              Encrypted: true
              VolumeSize: !Ref GatewayCacheSize
              VolumeType: gp2
        DisableApiTermination: false
        EbsOptimized: true
        IamInstanceProfile:
          Arn: !GetAtt SGInstanceProfile.Arn
        ImageId: !Ref AMI
        InstanceType: !Ref InstanceType
        KeyName: !Ref EC2KeyName
        SecurityGroupIds:
          - !Ref SGSecurityGroup
        UserData:
          Fn::Base64: |
            #!/bin/bash -xe
            export GATEWAY_NAME=gateway
            export AWS_DEFAULT_REGION="$(wget -q -O - http://169.254.169.254/latest/meta-data/placement/region)"
            export ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
            export ACTIVATION_KEY=$(wget http://localhost:8080/?activationRegion=$AWS_DEFAULT_REGION 2>&1 | sed -n '/activationKey/ s/.*\= *//p' | sed '$!d')
            export GATEWAY_ARN=$(aws storagegateway activate-gateway --gateway-name $GATEWAY_NAME --gateway-timezone GMT --gateway-region $AWS_DEFAULT_REGION --activation-key $ACTIVATION_KEY --gateway-type CACHED --query GatewayARN --output text)
            sleep 60
            export UPLOAD_DISK_ID=$(aws storagegateway list-local-disks --gateway-arn $GATEWAY_ARN --query 'Disks[?DiskNode==`/dev/sdb`].DiskId' --output text)
            export CACHE_DISK_ID=$(aws storagegateway list-local-disks --gateway-arn $GATEWAY_ARN --query 'Disks[?DiskNode==`/dev/sdc`].DiskId' --output text)
            aws storagegateway add-upload-buffer --gateway-arn $GATEWAY_ARN --disk-ids $UPLOAD_DISK_ID
            aws storagegateway add-cache --gateway-arn $GATEWAY_ARN --disk-ids $CACHE_DISK_ID

  InstanceAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${ResourceNamePrefix}-asg
      DesiredCapacity: 1
      HealthCheckGracePeriod: 60
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MaxSize: 1
      MinSize: 1
      VPCZoneIdentifier: !If [Create2AZs,
                              [!Ref Subnet1, !Ref Subnet2],
                              [!Ref Subnet1, !Ref Subnet2, !Ref Subnet3]]


  # Lambda Create Image Scheduler --------------------------------------------------------------------------------------

  CreateImageFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/'
      Policies:
        - PolicyName: create-image-execution-role
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                  - logs:DescribeLogGroups
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - autoscaling:DescribeAutoScalingGroups
                  - autoscaling:UpdateAutoScalingGroup
                  - ec2:CreateImage
                  - ec2:CreateSnapshot
                  - ec2:DescribeLaunchTemplates
                  - ec2:DescribeLaunchTemplateVersions
                  - ec2:CreateLaunchTemplateVersion
                  - ec2:ModifyLaunchTemplate
                  - ec2:RunInstances
                  - iam:PassRole
                Resource: "*"

  CreateImageFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub |
          import json
          import boto3

          def lambda_handler(event, context):
            asg_name = "${ResourceNamePrefix}-asg"
            launch_template_name="${ResourceNamePrefix}-launch-template"
            as_client = boto3.client("autoscaling")
            ec_client = boto3.client("ec2")

            # Retrieve the current instance assigned to the ASG
            asg = as_client.describe_auto_scaling_groups(AutoScalingGroupNames=[asg_name]).get("AutoScalingGroups")
            instance_id = asg[0].get("Instances")[0].get("InstanceId")

            # Create a new image and update the launch template an auto-scaling group
            image_id = ec_client.create_image(Name="sgw-ami", InstanceId=instance_id, NoReboot=True).get("ImageId")
            ec_client.create_launch_template_version(LaunchTemplateName=launch_template_name, LaunchTemplateData={"ImageId": image_id}, SourceVersion="$Latest")
            ec_client.modify_launch_template(LaunchTemplateName=launch_template_name, DefaultVersion="$Latest")
            as_client.update_auto_scaling_group(AutoScalingGroupName=asg_name, LaunchTemplate={"LaunchTemplateName": launch_template_name, "Version": "$Latest"})

            return { "statusCode": 200 }
      FunctionName: create-image
      Handler: index.lambda_handler
      Role: !GetAtt CreateImageFunctionRole.Arn
      Runtime: python3.7
      Timeout: 30

  # Storage and Archival -----------------------------------------------------------------------------------------------

  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256